Net::Server::PreForkSimple(3)ntributed Perl Documentationver::PreForkSimple(3)



NAME
       Net::Server::PreForkSimple - Net::Server personality

SYNOPSIS
         use Net::Server::PreForkSimple;
         @ISA = qw(Net::Server::PreForkSimple);

         sub process_request {
            #...code...
         }

         __PACKAGE__->run();

DESCRIPTION
       Please read the pod on Net::Server first.  This module is a
       personality, or extension, or sub class, of the Net::Server module.

       This personality binds to one or more ports and then forks
       "max_servers" child processes.  The server will make sure that at any
       given time there are always "max_servers" available to receive a client
       request.  Each of these children will process up to "max_requests"
       client connections.  This type is good for a heavily hit site that can
       keep "max_servers" processes dedicated to the serving.  (Multi port
       accept defaults to using flock to serialize the children).

       At this time, it does not appear that this module will pass tests on
       Win32 systems.  Any ideas or patches for making the tests pass would be
       welcome.

SAMPLE CODE
       Please see the sample listed in Net::Server.

COMMAND LINE ARGUMENTS
       In addition to the command line arguments of the Net::Server base
       class, Net::Server::PreFork contains several other configurable
       parameters.

         Key               Value                   Default
         max_servers       \d+                     50
         max_requests      \d+                     1000

         serialize         (flock|semaphore|pipe)  undef
         # serialize defaults to flock on multi_port or on Solaris
         lock_file         "filename"              POSIX::tmpnam

         check_for_dead    \d+                     30

         max_dequeue       \d+                     undef
         check_for_dequeue \d+                     undef

       max_servers
           The maximum number of child servers to start and maintain.  This
           does not apply to dequeue processes.

       max_requests
           The number of client connections to receive before a child
           terminates.

       serialize
           Determines whether the server serializes child connections.
           Options are undef, flock, semaphore, or pipe.  Default is undef.
           On multi_port servers or on servers running on Solaris, the default
           is flock.  The flock option uses blocking exclusive flock on the
           file specified in lock_file (see below).  The semaphore option uses
           IPC::Semaphore (thanks to Bennett Todd) for giving some sample
           code.  The pipe option reads on a pipe to choose the next.  the
           flock option should be the most bulletproof while the pipe option
           should be the most portable.  (Flock is able to reliquish the block
           if the process dies between accept on the socket and reading of the
           client connection - semaphore and pipe do not)

       lock_file
           Filename to use in flock serialized accept in order to serialize
           the accept sequece between the children.  This will default to a
           generated temporary filename.  If default value is used the
           lock_file will be removed when the server closes.

       check_for_dead
           Seconds to wait before checking to see if a child died without
           letting the parent know.

       max_dequeue
           The maximum number of dequeue processes to start.  If a value of
           zero or undef is given, no dequeue processes will be started.  The
           number of running dequeue processes will be checked by the
           check_for_dead variable.

       check_for_dequeue
           Seconds to wait before forking off a dequeue process.  The
           run_dequeue hook must be defined when using this setting.  It is
           intended to use the dequeue process to take care of items such as
           mail queues.  If a value of undef is given, no dequeue processes
           will be started.

CONFIGURATION FILE
       "Net::Server::PreFork" allows for the use of a configuration file to
       read in server parameters.  The format of this conf file is simple key
       value pairs.  Comments and white space are ignored.

         #-------------- file test.conf --------------

         ### server information
         max_servers   80

         max_requests  1000

         ### user and group to become
         user        somebody
         group       everybody

         ### logging ?
         log_file    /var/log/server.log
         log_level   3
         pid_file    /tmp/server.pid

         ### access control
         allow       .+\.(net|com)
         allow       domain\.com
         deny        a.+

         ### background the process?
         background  1

         ### ports to bind
         host        127.0.0.1
         port        localhost:20204
         port        20205

         ### reverse lookups ?
         # reverse_lookups on

         #-------------- file test.conf --------------

PROCESS FLOW
       Process flow follows Net::Server until the loop phase.  At this point
       "max_servers" are forked and wait for connections.  When a child
       accepts a connection, finishs processing a client, or exits, it relays
       that information to the parent, which keeps track and makes sure there
       are always "max_servers" running.

HOOKS
       The PreForkSimple server has the following hooks in addition to the
       hooks provided by the Net::Server base class.  See Net::Server

       "$self->run_n_children_hook()"
           This hook occurs at the top of run_n_children which is called each
           time the server goes to start more child processes.  This gives the
           parent to do a little of its own accountting (as desired).  Idea
           for this hook came from James FitzGibbon.

       "$self->child_init_hook()"
           This hook takes place immeditately after the child process forks
           from the parent and before the child begins accepting connections.
           It is intended for any addiotional chrooting or other security
           measures.  It is suggested that all perl modules be used by this
           point, so that the most shared memory possible is used.

       "$self->child_finish_hook()"
           This hook takes place immediately before the child tells the parent
           that it is exiting.  It is intended for saving out logged
           information or other general cleanup.

       "$self->run_dequeue()"
           This hook only gets called in conjuction with the check_for_dequeue
           setting.

BUGS
       Tests don't seem to work on Win32.  Any ideas or patches would be
       welcome.

TO DO
       See Net::Server

AUTHOR
       Paul T. Seamons paul@seamons.com

THANKS
       See Net::Server

SEE ALSO
       Please see also Net::Server::Fork, Net::Server::INET,
       Net::Server::PreFork, Net::Server::MultiType, Net::Server::Single
       Net::Server::SIG Net::Server::Daemonize Net::Server::Proto



perl v5.10.0                      2007-03-26     Net::Server::PreForkSimple(3)
